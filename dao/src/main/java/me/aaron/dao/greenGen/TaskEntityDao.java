package me.aaron.dao.greenGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.aaron.dao.entity.TaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ENTITY".
*/
public class TaskEntityDao extends AbstractDao<TaskEntity, Long> {

    public static final String TABLENAME = "TASK_ENTITY";

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SeqID = new Property(0, Long.class, "seqID", true, "_id");
        public final static Property OwnerUID = new Property(1, long.class, "ownerUID", false, "OWNER_UID");
        public final static Property SenderUID = new Property(2, long.class, "senderUID", false, "SENDER_UID");
        public final static Property SendName = new Property(3, String.class, "sendName", false, "SEND_NAME");
        public final static Property OrgID = new Property(4, long.class, "orgID", false, "ORG_ID");
        public final static Property ClientTaskID = new Property(5, String.class, "clientTaskID", false, "CLIENT_TASK_ID");
        public final static Property TaskID = new Property(6, long.class, "taskID", false, "TASK_ID");
        public final static Property SelfTask = new Property(7, int.class, "selfTask", false, "SELF_TASK");
        public final static Property MyProgress = new Property(8, double.class, "myProgress", false, "MY_PROGRESS");
        public final static Property IsStar = new Property(9, int.class, "isStar", false, "IS_STAR");
        public final static Property Descript = new Property(10, String.class, "descript", false, "DESCRIPT");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property MyStatus = new Property(12, int.class, "myStatus", false, "MY_STATUS");
        public final static Property Status = new Property(13, int.class, "status", false, "STATUS");
        public final static Property Priority = new Property(14, int.class, "priority", false, "PRIORITY");
        public final static Property CommentNum = new Property(15, int.class, "commentNum", false, "COMMENT_NUM");
        public final static Property AttachmentNum = new Property(16, int.class, "attachmentNum", false, "ATTACHMENT_NUM");
        public final static Property StartTime = new Property(17, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(18, long.class, "endTime", false, "END_TIME");
        public final static Property CreateTime = new Property(19, long.class, "createTime", false, "CREATE_TIME");
        public final static Property FinishTime = new Property(20, long.class, "finishTime", false, "FINISH_TIME");
        public final static Property UpdateTime = new Property(21, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Path = new Property(22, String.class, "path", false, "PATH");
        public final static Property Session = new Property(23, String.class, "session", false, "SESSION");
        public final static Property Expires = new Property(24, int.class, "expires", false, "EXPIRES");
        public final static Property ServerTime = new Property(25, long.class, "serverTime", false, "SERVER_TIME");
    };

    private DaoSession daoSession;


    public TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: seqID
                "\"OWNER_UID\" INTEGER NOT NULL ," + // 1: ownerUID
                "\"SENDER_UID\" INTEGER NOT NULL ," + // 2: senderUID
                "\"SEND_NAME\" TEXT," + // 3: sendName
                "\"ORG_ID\" INTEGER NOT NULL ," + // 4: orgID
                "\"CLIENT_TASK_ID\" TEXT," + // 5: clientTaskID
                "\"TASK_ID\" INTEGER NOT NULL ," + // 6: taskID
                "\"SELF_TASK\" INTEGER NOT NULL ," + // 7: selfTask
                "\"MY_PROGRESS\" REAL NOT NULL ," + // 8: myProgress
                "\"IS_STAR\" INTEGER NOT NULL ," + // 9: isStar
                "\"DESCRIPT\" TEXT," + // 10: descript
                "\"TITLE\" TEXT," + // 11: title
                "\"MY_STATUS\" INTEGER NOT NULL ," + // 12: myStatus
                "\"STATUS\" INTEGER NOT NULL ," + // 13: status
                "\"PRIORITY\" INTEGER NOT NULL ," + // 14: priority
                "\"COMMENT_NUM\" INTEGER NOT NULL ," + // 15: commentNum
                "\"ATTACHMENT_NUM\" INTEGER NOT NULL ," + // 16: attachmentNum
                "\"START_TIME\" INTEGER NOT NULL ," + // 17: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 18: endTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 19: createTime
                "\"FINISH_TIME\" INTEGER NOT NULL ," + // 20: finishTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 21: updateTime
                "\"PATH\" TEXT," + // 22: path
                "\"SESSION\" TEXT," + // 23: session
                "\"EXPIRES\" INTEGER NOT NULL ," + // 24: expires
                "\"SERVER_TIME\" INTEGER NOT NULL );"); // 25: serverTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long seqID = entity.getSeqID();
        if (seqID != null) {
            stmt.bindLong(1, seqID);
        }
        stmt.bindLong(2, entity.getOwnerUID());
        stmt.bindLong(3, entity.getSenderUID());
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(4, sendName);
        }
        stmt.bindLong(5, entity.getOrgID());
 
        String clientTaskID = entity.getClientTaskID();
        if (clientTaskID != null) {
            stmt.bindString(6, clientTaskID);
        }
        stmt.bindLong(7, entity.getTaskID());
        stmt.bindLong(8, entity.getSelfTask());
        stmt.bindDouble(9, entity.getMyProgress());
        stmt.bindLong(10, entity.getIsStar());
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(11, descript);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getMyStatus());
        stmt.bindLong(14, entity.getStatus());
        stmt.bindLong(15, entity.getPriority());
        stmt.bindLong(16, entity.getCommentNum());
        stmt.bindLong(17, entity.getAttachmentNum());
        stmt.bindLong(18, entity.getStartTime());
        stmt.bindLong(19, entity.getEndTime());
        stmt.bindLong(20, entity.getCreateTime());
        stmt.bindLong(21, entity.getFinishTime());
        stmt.bindLong(22, entity.getUpdateTime());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(23, path);
        }
 
        String session = entity.getSession();
        if (session != null) {
            stmt.bindString(24, session);
        }
        stmt.bindLong(25, entity.getExpires());
        stmt.bindLong(26, entity.getServerTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long seqID = entity.getSeqID();
        if (seqID != null) {
            stmt.bindLong(1, seqID);
        }
        stmt.bindLong(2, entity.getOwnerUID());
        stmt.bindLong(3, entity.getSenderUID());
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(4, sendName);
        }
        stmt.bindLong(5, entity.getOrgID());
 
        String clientTaskID = entity.getClientTaskID();
        if (clientTaskID != null) {
            stmt.bindString(6, clientTaskID);
        }
        stmt.bindLong(7, entity.getTaskID());
        stmt.bindLong(8, entity.getSelfTask());
        stmt.bindDouble(9, entity.getMyProgress());
        stmt.bindLong(10, entity.getIsStar());
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(11, descript);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getMyStatus());
        stmt.bindLong(14, entity.getStatus());
        stmt.bindLong(15, entity.getPriority());
        stmt.bindLong(16, entity.getCommentNum());
        stmt.bindLong(17, entity.getAttachmentNum());
        stmt.bindLong(18, entity.getStartTime());
        stmt.bindLong(19, entity.getEndTime());
        stmt.bindLong(20, entity.getCreateTime());
        stmt.bindLong(21, entity.getFinishTime());
        stmt.bindLong(22, entity.getUpdateTime());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(23, path);
        }
 
        String session = entity.getSession();
        if (session != null) {
            stmt.bindString(24, session);
        }
        stmt.bindLong(25, entity.getExpires());
        stmt.bindLong(26, entity.getServerTime());
    }

    @Override
    protected final void attachEntity(TaskEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // seqID
            cursor.getLong(offset + 1), // ownerUID
            cursor.getLong(offset + 2), // senderUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sendName
            cursor.getLong(offset + 4), // orgID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clientTaskID
            cursor.getLong(offset + 6), // taskID
            cursor.getInt(offset + 7), // selfTask
            cursor.getDouble(offset + 8), // myProgress
            cursor.getInt(offset + 9), // isStar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // descript
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.getInt(offset + 12), // myStatus
            cursor.getInt(offset + 13), // status
            cursor.getInt(offset + 14), // priority
            cursor.getInt(offset + 15), // commentNum
            cursor.getInt(offset + 16), // attachmentNum
            cursor.getLong(offset + 17), // startTime
            cursor.getLong(offset + 18), // endTime
            cursor.getLong(offset + 19), // createTime
            cursor.getLong(offset + 20), // finishTime
            cursor.getLong(offset + 21), // updateTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // path
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // session
            cursor.getInt(offset + 24), // expires
            cursor.getLong(offset + 25) // serverTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setSeqID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnerUID(cursor.getLong(offset + 1));
        entity.setSenderUID(cursor.getLong(offset + 2));
        entity.setSendName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgID(cursor.getLong(offset + 4));
        entity.setClientTaskID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskID(cursor.getLong(offset + 6));
        entity.setSelfTask(cursor.getInt(offset + 7));
        entity.setMyProgress(cursor.getDouble(offset + 8));
        entity.setIsStar(cursor.getInt(offset + 9));
        entity.setDescript(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMyStatus(cursor.getInt(offset + 12));
        entity.setStatus(cursor.getInt(offset + 13));
        entity.setPriority(cursor.getInt(offset + 14));
        entity.setCommentNum(cursor.getInt(offset + 15));
        entity.setAttachmentNum(cursor.getInt(offset + 16));
        entity.setStartTime(cursor.getLong(offset + 17));
        entity.setEndTime(cursor.getLong(offset + 18));
        entity.setCreateTime(cursor.getLong(offset + 19));
        entity.setFinishTime(cursor.getLong(offset + 20));
        entity.setUpdateTime(cursor.getLong(offset + 21));
        entity.setPath(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSession(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setExpires(cursor.getInt(offset + 24));
        entity.setServerTime(cursor.getLong(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskEntity entity, long rowId) {
        entity.setSeqID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskEntity entity) {
        if(entity != null) {
            return entity.getSeqID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
