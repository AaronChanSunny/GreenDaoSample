package me.aaron.dao.greenGen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import me.aaron.dao.entity.TaskEntity;

import me.aaron.dao.entity.FileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_ENTITY".
*/
public class FileEntityDao extends AbstractDao<FileEntity, Long> {

    public static final String TABLENAME = "FILE_ENTITY";

    /**
     * Properties of entity FileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, long.class, "taskId", false, "TASK_ID");
        public final static Property FileType = new Property(2, int.class, "fileType", false, "FILE_TYPE");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(4, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property DentryID = new Property(5, String.class, "dentryID", false, "DENTRY_ID");
        public final static Property Md5 = new Property(6, String.class, "md5", false, "MD5");
        public final static Property UploadTime = new Property(7, long.class, "uploadTime", false, "UPLOAD_TIME");
        public final static Property LocalFilePath = new Property(8, String.class, "localFilePath", false, "LOCAL_FILE_PATH");
    };

    private DaoSession daoSession;

    private Query<FileEntity> taskEntity_AttachFilesQuery;

    public FileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" INTEGER NOT NULL ," + // 1: taskId
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 2: fileType
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 4: fileSize
                "\"DENTRY_ID\" TEXT," + // 5: dentryID
                "\"MD5\" TEXT," + // 6: md5
                "\"UPLOAD_TIME\" INTEGER NOT NULL ," + // 7: uploadTime
                "\"LOCAL_FILE_PATH\" TEXT);"); // 8: localFilePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getFileType());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String dentryID = entity.getDentryID();
        if (dentryID != null) {
            stmt.bindString(6, dentryID);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(7, md5);
        }
        stmt.bindLong(8, entity.getUploadTime());
 
        String localFilePath = entity.getLocalFilePath();
        if (localFilePath != null) {
            stmt.bindString(9, localFilePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getFileType());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String dentryID = entity.getDentryID();
        if (dentryID != null) {
            stmt.bindString(6, dentryID);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(7, md5);
        }
        stmt.bindLong(8, entity.getUploadTime());
 
        String localFilePath = entity.getLocalFilePath();
        if (localFilePath != null) {
            stmt.bindString(9, localFilePath);
        }
    }

    @Override
    protected final void attachEntity(FileEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileEntity readEntity(Cursor cursor, int offset) {
        FileEntity entity = new FileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // taskId
            cursor.getInt(offset + 2), // fileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dentryID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // md5
            cursor.getLong(offset + 7), // uploadTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // localFilePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.getLong(offset + 1));
        entity.setFileType(cursor.getInt(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getLong(offset + 4));
        entity.setDentryID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMd5(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUploadTime(cursor.getLong(offset + 7));
        entity.setLocalFilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachFiles" to-many relationship of TaskEntity. */
    public List<FileEntity> _queryTaskEntity_AttachFiles(long taskId) {
        synchronized (this) {
            if (taskEntity_AttachFilesQuery == null) {
                QueryBuilder<FileEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                taskEntity_AttachFilesQuery = queryBuilder.build();
            }
        }
        Query<FileEntity> query = taskEntity_AttachFilesQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskEntityDao().getAllColumns());
            builder.append(" FROM FILE_ENTITY T");
            builder.append(" LEFT JOIN TASK_ENTITY T0 ON T.\"TASK_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FileEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        FileEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TaskEntity task = loadCurrentOther(daoSession.getTaskEntityDao(), cursor, offset);
         if(task != null) {
            entity.setTask(task);
        }

        return entity;    
    }

    public FileEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FileEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FileEntity> list = new ArrayList<FileEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FileEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FileEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
